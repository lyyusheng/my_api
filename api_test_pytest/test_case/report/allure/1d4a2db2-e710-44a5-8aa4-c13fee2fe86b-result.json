{"name": "test_register[case5]", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'F:\\\\BaiduNetdiskWorkspace\\\\api_test_pytest\\\\test_case\\\\api_case_2.xlsx'", "trace": "self = <api_test_pytest.test_case.test_register.TestCase object at 0x00000218A895FB50>\ncase = {'ActualResult': '{\"status\":1,\"code\":\"10001\",\"data\":null,\"msg\":\"注册成功\"}', 'CaseId': 6, 'ExpectedResult': '{\"status\":1,\"code\":\"10001\",\"data\":null,\"msg\":\"注册成功\"}', 'Method': 'GET', ...}\nregister_setup = <common.do_excel.DoExcel object at 0x00000218A8C9EEB0>\n\n    @pytest.mark.register\n    @pytest.mark.all\n    @pytest.mark.parametrize(\"case\", test_data)\n    def test_register(self, case, register_setup):\n        t = register_setup\n        method = case['Method']\n        url = case['Url']\n        param = eval(case['Params'])  # 讀出來是個字符串，必須eval()變回原來字典類型\n        my_log.info('-----正在测试{}模块里面第{}条测试用例：{},'.format(case['Module'], case['CaseId'], case['Title']))\n        my_log.info('测试数据是：{}'.format(case['Params']))\n        res = HttpRequest().http_request(method, url, param, cookies=None)\n        try:\n            # self.assertEqual(case[\"ExpectedResult\"], res.text)\n            assert (json.loads(case[\"ExpectedResult\"]) == res.json())\n            test_result = \"Pass\"\n        except Exception as e:\n            my_log.error(\"http请求出错了，错误是：{}\".format(e))\n            test_result = \"Failed\"\n            raise e  # 抛出错误，否则测试报告那里全部都是通过\n        finally:\n>           t.write_back(case['CaseId'] + 1, 9, res.text)  # 写回实际结果字符串类型不能用json，参数：行 列 实际结果\n\ntest_register.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\do_excel.py:67: in write_back\n    wb.save(self.file_name)\nE:\\PycharmProjects\\AppTest\\venv\\lib\\site-packages\\openpyxl\\workbook\\workbook.py:408: in save\n    save_workbook(self, filename)\nE:\\PycharmProjects\\AppTest\\venv\\lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'F:\\\\BaiduNetdiskWorkspace\\\\api_test_pytest\\\\test_case\\\\api_case_2.xlsx'\nmode = 'w', compression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'F:\\\\BaiduNetdiskWorkspace\\\\api_test_pytest\\\\test_case\\\\api_case_2.xlsx'\n\nE:\\Program Files\\Python38\\lib\\zipfile.py:1251: PermissionError"}, "attachments": [{"name": "log", "source": "d8dc9348-da8b-412b-ae3c-31942e6b1aec-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a15d6340-fbc3-4801-8d43-4317971e812c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'CaseId': 6, 'Module': 'register', 'Title': '不输入用户名', 'Method': 'GET', 'Url': 'http://192.168.153.129:8080/futureloan/mvc/api/member/register', 'Params': \"{'mobilephone':'18300071089','pwd':'12345678','regname':''}\", 'sql': None, 'ExpectedResult': '{\"status\":1,\"code\":\"10001\",\"data\":null,\"msg\":\"注册成功\"}', 'ActualResult': '{\"status\":1,\"code\":\"10001\",\"data\":null,\"msg\":\"注册成功\"}'}"}], "start": 1626698643130, "stop": 1626698643501, "uuid": "ca15a8c2-1563-49b7-9eb9-660d9cdf2429", "historyId": "09d61c258fed3756c3f5b0f829ff2a6a", "testCaseId": "93b760c0c5bfcb1a963456a14730333a", "fullName": "test_register.TestCase#test_register", "labels": [{"name": "tag", "value": "register"}, {"name": "tag", "value": "all"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "DESKTOP-IFMHOGL"}, {"name": "thread", "value": "14260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register"}]}