{"name": "test_recharge[case1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'code': '100..., 'status': 1} == {'code': '100..., 'status': 1}\n  Omitting 3 identical items, use -vv to show\n  Differing items:\n  {'data': {'id': 81, 'leaveamount': '5977000.00', 'mobilephone': '18300070752', 'pwd': '25D55AD283AA400AF464C76D713C07AD', ...}} != {'data': {'id': 81, 'leaveamount': '5977000.00', 'mobilephone': '18300070752', 'pwd': '955178F66CBC8C8A7626ECFE3AB23ED0', ...}}\n  Full diff:\n    {\n     'code': '10001',\n     'data': {'id': 81,...\n  \n  ...Full output truncated (14 lines hidden), use '-vv' to show", "trace": "self = <api_test_pytest.test_case.test_recharge.TestCase object at 0x0000027AC3BBB370>\ncase = {'ActualResult': '{\"status\":1,\"code\":\"10001\",\"data\":{\"id\":81,\"regname\":\"小蜜蜂\",\"pwd\":\"955178F66CBC8C8A7626ECFE3AB23ED0\",...0070752\",\"leaveamount\":\"5977000.00\",\"type\":\"1\",\"regtime\":\"2020-01-15 16:19:51.0\"},\"msg\":\"充值成功\"}', 'Method': 'GET', ...}\nrecharge_setup = <common.do_excel.DoExcel object at 0x0000027AC3B99220>\n\n    @pytest.mark.all\n    @pytest.mark.recharge\n    @pytest.mark.parametrize(\"case\", test_data)\n    def test_recharge(self, case, recharge_setup):\n        t = recharge_setup\n        method = case[\"Method\"]\n        url = case[\"Url\"]\n        param = eval(get_data.re_p(case[\"Params\"]))\n        my_log.info('-------正在测试{}模块里面第{}条测试用例：{}'.format(case['Module'], case['CaseId'], case['Title']))\n        my_log.info('测试数据是：{}'.format(case))\n    \n        if case[\"sql\"] is not None:\n            sql = eval(case[\"sql\"])[\"sql\"]\n            before_amount = DoMysql().do_mysql(sql, 1)[0]\n    \n        res = HttpRequest().http_request(method, url, param, getattr(GetData, \"COOKIES\"))\n        if res.cookies:\n            setattr(GetData, \"COOKIES\", res.cookies)\n    \n        if case[\"sql\"] is not None:\n            sql = eval(case[\"sql\"])[\"sql\"]\n            after_amount = DoMysql().do_mysql(sql, 1)[0]\n            recharge_amount = int(param[\"amount\"])\n            expect_amount = before_amount + recharge_amount\n            assert(expect_amount == after_amount)\n    \n        if case[\"ExpectedResult\"].find(\"exp_amount\") > -1:\n            # case[\"ExpectedResult\"].replace(\"exp_amount\", str(expect_amount)) #错了\n            case['ExpectedResult'] = case['ExpectedResult'].replace('exp_amount', str(expect_amount))\n        try:\n            assert(json.loads(case[\"ExpectedResult\"]) == res.json())\n            TestResult = \"Pass\"\n        except AssertionError as e:\n            TestResult = \"Failed\"\n>           raise e\n\ntest_case\\test_recharge.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api_test_pytest.test_case.test_recharge.TestCase object at 0x0000027AC3BBB370>\ncase = {'ActualResult': '{\"status\":1,\"code\":\"10001\",\"data\":{\"id\":81,\"regname\":\"小蜜蜂\",\"pwd\":\"955178F66CBC8C8A7626ECFE3AB23ED0\",...0070752\",\"leaveamount\":\"5977000.00\",\"type\":\"1\",\"regtime\":\"2020-01-15 16:19:51.0\"},\"msg\":\"充值成功\"}', 'Method': 'GET', ...}\nrecharge_setup = <common.do_excel.DoExcel object at 0x0000027AC3B99220>\n\n    @pytest.mark.all\n    @pytest.mark.recharge\n    @pytest.mark.parametrize(\"case\", test_data)\n    def test_recharge(self, case, recharge_setup):\n        t = recharge_setup\n        method = case[\"Method\"]\n        url = case[\"Url\"]\n        param = eval(get_data.re_p(case[\"Params\"]))\n        my_log.info('-------正在测试{}模块里面第{}条测试用例：{}'.format(case['Module'], case['CaseId'], case['Title']))\n        my_log.info('测试数据是：{}'.format(case))\n    \n        if case[\"sql\"] is not None:\n            sql = eval(case[\"sql\"])[\"sql\"]\n            before_amount = DoMysql().do_mysql(sql, 1)[0]\n    \n        res = HttpRequest().http_request(method, url, param, getattr(GetData, \"COOKIES\"))\n        if res.cookies:\n            setattr(GetData, \"COOKIES\", res.cookies)\n    \n        if case[\"sql\"] is not None:\n            sql = eval(case[\"sql\"])[\"sql\"]\n            after_amount = DoMysql().do_mysql(sql, 1)[0]\n            recharge_amount = int(param[\"amount\"])\n            expect_amount = before_amount + recharge_amount\n            assert(expect_amount == after_amount)\n    \n        if case[\"ExpectedResult\"].find(\"exp_amount\") > -1:\n            # case[\"ExpectedResult\"].replace(\"exp_amount\", str(expect_amount)) #错了\n            case['ExpectedResult'] = case['ExpectedResult'].replace('exp_amount', str(expect_amount))\n        try:\n>           assert(json.loads(case[\"ExpectedResult\"]) == res.json())\nE           AssertionError: assert {'code': '100..., 'status': 1} == {'code': '100..., 'status': 1}\nE             Omitting 3 identical items, use -vv to show\nE             Differing items:\nE             {'data': {'id': 81, 'leaveamount': '5977000.00', 'mobilephone': '18300070752', 'pwd': '25D55AD283AA400AF464C76D713C07AD', ...}} != {'data': {'id': 81, 'leaveamount': '5977000.00', 'mobilephone': '18300070752', 'pwd': '955178F66CBC8C8A7626ECFE3AB23ED0', ...}}\nE             Full diff:\nE               {\nE                'code': '10001',\nE                'data': {'id': 81,...\nE             \nE             ...Full output truncated (14 lines hidden), use '-vv' to show\n\ntest_case\\test_recharge.py:49: AssertionError"}, "attachments": [{"name": "log", "source": "b45de0d2-cfb3-4e0e-a819-94782955b059-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'CaseId': 2, 'Module': 'recharge', 'Title': '正常充值', 'Method': 'GET', 'Url': 'http://192.168.153.129:8080/futureloan/mvc/api/member/recharge', 'Params': '{\"mobilephone\":\"18300070752\",\"amount\":\"300000\"}', 'sql': '{\\'sql\\':\\'select LeaveAmount from member where MobilePhone = \"18300070752\" \\'}', 'ExpectedResult': '{\"status\":1,\"code\":\"10001\",\"data\":{\"id\":81,\"regname\":\"小蜜蜂\",\"pwd\":\"25D55AD283AA400AF464C76D713C07AD\",\"mobilephone\":\"18300070752\",\"leaveamount\":\"exp_amount\",\"type\":\"1\",\"regtime\":\"2020-01-15 16:19:51.0\"},\"msg\":\"充值成功\"}', 'ActualResult': '{\"status\":1,\"code\":\"10001\",\"data\":{\"id\":81,\"regname\":\"小蜜蜂\",\"pwd\":\"955178F66CBC8C8A7626ECFE3AB23ED0\",\"mobilephone\":\"18300070752\",\"leaveamount\":\"5678000.00\",\"type\":\"1\",\"regtime\":\"2021-07-08 11:01:10.0\"},\"msg\":\"充值成功\"}'}"}], "start": 1626643535876, "stop": 1626643536397, "uuid": "916bf92e-bfe9-48c0-8f89-cb843e391ac0", "historyId": "1292f3ec06608c1541f8ec443c33327c", "testCaseId": "2b56bc9a964ee5808f8ffe92b3aaa921", "fullName": "test_case.test_recharge.TestCase#test_recharge", "labels": [{"name": "tag", "value": "all"}, {"name": "tag", "value": "recharge"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_recharge"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "DESKTOP-IFMHOGL"}, {"name": "thread", "value": "12628-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_recharge"}]}